#+TITLE: PAgP LACP Etherchannel
[[file:_assets/2020-11-26_23-50-40_screenshot.png]]
* CƠ SỞ LÝ THUYẾT
  - EtherChannel là công nghệ cho phép kết hợp các kết nối Ethernet thành một bó (bundle) để tăng băng thông. Mỗi bundle còn được gọi là một kết nối luận lý PortChannel (FastEtherChannel - FEC hay GigabitEtherChannel - GEC). Công nghệ này được xem là một cách đơn giản để tăng băng thông giữa các switch mà không cần phải mua phần cứng mới.
  - Có hai giao thức dùng để thương lượng trong EtherChannel là:
    - PAgP (Port Aggregation Protocol – giao thức độc quyền của Cisco).
    - LACP (Link Aggregation Control Protocol – giao thức chuẩn hóa IEEE 802.3ad).
  #+DOWNLOADED: screenshot @ 2020-11-28 22:17:55
  [[file:_assets/2020-11-28_22-17-55_screenshot.png]]

- Ở mode Auto (PAgP)/Passive (LACP) thì chờ thương lượng để lên EtherChannel  bị động.
- Ở mode Desirable (PAgP)/Active (LACP) thì chủ động thương lượng với switch bên kia để lên EtherChannel.

#+DOWNLOADED: screenshot @ 2020-11-28 22:19:09
#+CAPTION:những trường hợp không thể thương lượng
[[file:_assets/2020-11-28_22-19-09_screenshot.png]]
- Phân phối traffic trong EtherChannel - Load Balancing
  - Cần chú ý là lưu lượng sẽ được phân phối trên các kết nối riêng lẽ bên trong EtherChannel. Nếu một kết nối bên trong một bundle là ưu tiên hơn do kết quả của thuật toán phân phối tải của EtherChannel, kết nối thành viên này sẽ không mang lưu lượng theo một tỉ lệ tương ứng. Nói cách khác, tải không phải luôn luôn phân phối đều giữa các kết nối thành phần. Traffic không phải lúc nào cũng được phân bố đồng đều qua các đường link thuộc EtherChannel, mà nó phụ thuộc vào phương pháp load balancing mà switch sử dụng và mẫu traffic trong mạng.
  - Switch lựa chọn đường liên kết trong EtherChannel để forward frame dựa vào kết quả của thuật toán hash. Thuật toán có thể sử dụng source IP, destination IP (hoặc cả hai), source MAC, destination MAC (hoặc cả hai), TCP/UDP port number. Thuật toán hash sẽ cho ra một chuỗi số nhị phân (0 & 1).
  - Nếu chỉ có source hoặc destination được hash (IP, MAC, port number) thì switch sẽ sử dụng một hoặc nhiều low-oder bits của giá trị hash để làm index lựa chọn link trong EtherChannel. Nếu cả source và destination được hash, switch sẽ thực hiện phép toán exclusive-OR (XOR) trên một hoặc nhiều low-order bits để làm index.


#+DOWNLOADED: screenshot @ 2020-11-28 22:22:05
#+CAPTION:Bảng phân loại EtherChannel Load Balancing
[[file:_assets/2020-11-28_22-22-05_screenshot.png]]

* TÌNH HUỐNG THỰC NGHIỆM
** Tình huống
 Bạn là một chuyên gia về spanning tree và là chuyên gia về sắp xếp lại  toàn hệ thống (migration network). Công ty Corkscrew, một trong những khác hàng của bạn, có vấn đề với mấy cái switch của họ. Có quá nhiều vlans trong mạng lưới của họ và bạn cần phải giản số tính toán của của spanning tree xuống. Và kết quả là bạn phải áp dụng MST(multi spanning tree) cho hệ thống này.

**  Cài PAgP giữa sw1 và sw2. Sw1 chủ động tạo eth-channel và sw2 chỉ phản hồi
       #+begin_src python

      - sw1(config)# int range g1/0-1

      - sw1(config-if-range)# channel-group 12 desirable

      - sw2(config)# int range g1/0-1

      - sw2(config-if-range)# channel-group 12 auto

    #+end_src
      - sw1# ~show etherchannel summery~
        #+DOWNLOADED: screenshot @ 2020-11-27 00:02:19
 [[file:_assets/2020-11-27_00-02-19_screenshot.png]]
    - sw2# ~show etherch 12 port-channel~
      #+DOWNLOADED: screenshot @ 2020-11-27 00:04:12
 [[file:_assets/2020-11-27_00-04-12_screenshot.png]]



**  Cài đặt LACP giữa SW1 và SW3. SW1  chủ động tạo Etherchannel và Sw3 chỉ phản hồi lại các yêu cầu đó
      #+begin_src python
   - sw1(config)# int range g3/0-1
   - sw1(config-if-range)# channel-group 13 mode active
   - sw3(config)#int range g3/0-1
   - sw3(config-if-range)# channel-group 13 mode passive
   #+end_src

     #+DOWNLOADED: screenshot @ 2020-11-27 00:09:27
     [[file:_assets/2020-11-27_00-09-27_screenshot.png]]

**  Cài Eth-channel giữa sw2 và sw3, bạn không được dùng bất kỳ giao thức nào cho việc thỏa hiệp giữa 2 switch
   + Mode on là không dùng bất kỳ giao thức thương lượng nào cả. Không được khuyến khích dùng vì dễ gây ra loop giữa 2 đầu. 
   #+begin_src python
   - sw2(config)#int range g2/0-1

   - sw2(config-if-range)#channel-group 23 mode on

   - sw3(config)#int range g3/0-1

   - sw3(config-if-range)#channel-group 23 mode on
   - s3(config-if-range)#do show etherch 23 sum
   #+end_src
   #+DOWNLOADED: screenshot @ 2020-11-27 00:14:31
   [[file:_assets/2020-11-27_00-14-31_screenshot.png]]
 
**  Cài eth channel giữa sw1 và sw2, và dùng destination mac address load-balancing
        #+begin_src python
     - sw1(config)#port-channel load-balance dst-mac

     - sw2(config)#port-channel load-balance dst-mac
     #+end_src
Kiểm tra lại bằng câu lệnh ~show etherchannel load~
#+DOWNLOADED: screenshot @ 2020-11-27 00:18:43
[[file:_assets/2020-11-27_00-18-43_screenshot.png]]



